<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby18 -wKU

require "#{ENV['TM_SUPPORT_PATH']}/lib/escape.rb"
require 'yaml'

# Determine keywords based on settings or scope
# See https://kapeli.com/dash_plugins
def keywords
  setting = ENV['TM_DASH_KEYWORDS']
  return setting if setting

  # Load default mapping
  defaults = YAML.load(DATA)
  # Find the innermost root scope
  # scope = ENV['TM_SCOPE'].split.reverse.find { |e| e =~ /^(source|text)/ }
  # Find all root scopes
  scopes = ENV['TM_SCOPE'].split.find_all { |e| e =~ /^(source|text)/ }
  # Find keywords for scopes
  scopes.map do |scope|
    defaults.reject do |key, value|
      pattern = /(^|\.)#{Regexp.escape(key)}(\.|$)/
      scope.split('.').none? { |c| c =~ pattern }
    end.values
  end.join(',')
end

query = e_url STDIN.read

system 'open', '-g', "dash-plugin://keys=#{keywords}&amp;query=#{query}"

__END__
---
actionscript: actionscript
boo: unity3d
c: c,glib,gl2,gl3,gl4,manpages
c++: cpp,net,boost,qt,cvcpp,cocos2dx,c,manpages
c#: net,mono,unity3d
js.objj: cappuccino
clojure: clojure
coffee: coffee
coldfusion: cf
ini: nginx
css: css,bootstrap,foundation,less,awesome,cordova,phonegap
dart: dartlang,polymerdart,angulardart
elixir: elixir
erlang: erlang
go: go,godoc
gradle: gradle
haskell: haskell
haml: haml
html: html,svg,css,bootstrap,foundation,awesome,statamic,javascript,jquery,jqueryui,jquerym,angularjs,backbone,marionette,meteor,moo,prototype,ember,lodash,underscore,sencha,extjs,knockout,zepto,cordova,phonegap,yui
jade: jade
java: java,javafx,grails,groovy,playjava,spring,cvj,processing,javadoc
java-properties: java,javafx,grails,groovy,playjava,spring,cvj,processing,javadoc
js: javascript,jquery,jqueryui,jquerym,angularjs,backbone,marionette,meteor,sproutcore,moo,prototype,bootstrap,foundation,lodash,underscore,ember,sencha,extjs,titanium,knockout,zepto,yui,d3,svg,dojo,coffee,nodejs,express,grunt,mongoose,moment,require,awsjs,jasmine,sails,sinon,chai,html,css,cordova,phonegap,unity3d
julia: julia
less: less
lisp: lisp
lua: lua,corona
markdown: markdown
objc: iphoneos,macosx,watchos,tvos,appledoc,cocos2d,cocos3d,kobold2d,sparrow,c,manpages,cocoapods
objc++: cpp,iphoneos,macosx,appledoc,cocos2dx,cocos2d,cocos3d,kobold2d,sparrow,c,manpages,cocoapods
ocaml: ocaml
perl: perl,manpages
php: php,wordpress,drupal,zend,laravel,yii,joomla,ee,codeigniter,cakephp,phpunit,symfony,typo3,twig,smarty,craft,phpp,html,statamic,mysql,sqlite,mongodb,psql,redis
processing: processing
pug: pug
puppet: puppet
python: python,django,twisted,sphinx,flask,tornado,sqlalchemy,numpy,scipy,salt,pandas,matplotlib,cvp
r: r
racket: racket
ruby: ruby,rubygems,rails
rust: rust
sass: sass,compass,bourbon,neat,susy,css
scala: scala,akka,playscala
shell: bash,manpages
sql: mysql,sqlite,psql
stylus: stylus
swift: swift,iphoneos,macosx,watchos,tvos,appledoc,cocoapods
tcl: tcl
typescript: typescript
yaml: chef,ansible
</string>
	<key>fallbackInput</key>
	<string>word</string>
	<key>input</key>
	<string>selection</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>^@h</string>
	<key>name</key>
	<string>Context-Sensitive Documentation for Word / Selection</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>toolTip</string>
	<key>uuid</key>
	<string>2E2D93CC-8D2B-415E-8A4E-223726CDCD24</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
